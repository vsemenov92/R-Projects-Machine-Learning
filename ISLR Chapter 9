#3a)
x1 = c(3, 2, 4, 1, 2, 4, 4)
x2 = c(4, 2, 4, 4, 1, 3, 1)
colours = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1, x2, col = colours, xlim = c(0, 5), ylim = c(0, 5))

#b)
plot(x1, x2, col = colours, xlim = c(0, 5), ylim = c(0, 5))
abline(-0.5, 1)

#d)
plot(x1, x2, col = colours, xlim = c(0, 5), ylim = c(0, 5))
abline(-0.5, 1)
abline(-1, 1, lty = 2)
abline(0, 1, lty = 2)

#e)
plot(x1, x2, col = colours, xlim = c(0, 5), ylim = c(0, 5))
abline(-0.5, 1)
arrows(2, 1, 2, 1.5)
arrows(2, 2, 2, 1.5)
arrows(4, 4, 4, 3.5)
arrows(4, 3, 4, 3.5)

#g)
plot(x1, x2, col = colours, xlim = c(0, 5), ylim = c(0, 5))
abline(-0.3, 1)

#h)
plot(x1, x2, col = colours, xlim = c(0, 5), ylim = c(0, 5))
points(c(3), c(1), col = c("red"))

#5a)
set.seed(1)
ex1 = runif(500) - 0.5
ex2 = runif(500) - 0.5
y = 1 * (ex1^2 - ex2^2 > 0)

#b)
plot(ex1, ex2, xlab = "X1", ylab = "X2", col = (4 - y), pch = (3 - y))

#c)
log.fit = glm(y ~ ex1 + ex2, family = "binomial")
summary(log.fit)

#d)
data = data.frame(ex1 = ex1, ex2 = ex2, y = y)
log.prob = predict(log.fit, data, type = "response")
log.pred = rep(0, 500)
log.pred[log.prob > 0.5] = 1
plot(data[log.pred == 1, ]$ex1, data[log.pred == 1, ]$ex2, col = (4 - 1), pch = (3 - 1), xlab = "X1", ylab = "X2")
points(data[log.pred == 0, ]$ex1, data[log.pred == 0, ]$ex2, col = (4 - 0), pch = (3 - 0))

#e)
log.non.fit <- glm(y ~ poly(ex1, 2) + poly(ex2, 2) + I(ex1 * ex2), family = "binomial")
summary(log.non.fit)

#f)
log.non.prob = predict(log.non.fit, data, type = "response")
log.non.pred = rep(0, 500)
log.non.pred[log.non.prob > 0.5] = 1
plot(data[log.non.pred == 1, ]$ex1, data[log.non.pred == 1, ]$ex2, col = (4 - 1), pch = (3 - 1), xlab = "X1", ylab = "X2")
points(data[log.non.pred == 0, ]$ex1, data[log.non.pred == 0, ]$ex2, col = (4 - 0), pch = (3 - 0))

#g)
install.packages('e1071')
library(e1071)
data$y = as.factor(data$y)
svm.fit = svm(y ~ ex1 + ex2, data, kernel = "linear", cost = 0.01)
pred.svm = predict(svm.fit, data)
plot(data[pred.svm == 0, ]$ex1, data[pred.svm == 0, ]$ex2, col = (4 - 0), pch = (3 - 0), xlab = "X1", ylab = "X2")
points(data[pred.svm == 1, ]$ex1, data[pred.svm == 1, ]$ex2, col = (4 - 1), pch = (3 - 1))

#h)
svm.non.fit = svm(y ~ ex1 + ex2, data, kernel = "radial", gamma = 1)
pred.svm.non = predict(svm.non.fit, data)
plot(data[pred.svm.non == 0, ]$ex1, data[pred.svm.non == 0, ]$ex2, col = (4 - 0), pch = (3 - 0), xlab = "X1", ylab = "X2")
points(data[pred.svm.non == 1, ]$ex1, data[pred.svm.non == 1, ]$ex2, col = (4 - 1), pch = (3 - 1))







